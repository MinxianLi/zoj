#labels Phase-Design
= Introduction =

This page defines the communication protocol between the judge client and the judge queue service.

= Definition =

 * "the service" is the judge queue service.
 * "the client" is the judge client.
 * "the program" is the one to be judged.
 * "the source file" is the program's source file

All messages between the service and the client are in binary format. Integers are always sent in network order (Big Endian).

= Details =

== 1. Judge Request ==
A judge request is always issued by the judge queue service. A judge request consists of a header and an optional source file.

The header is always 18 bytes long and contains the following fields:
|| *Name* || *Size* || *Description* ||
|| Source File Type || 1 || The source file type code which is defined [SourceFileSuffixList here]. The client uses it to determine which compiler to use. ||
|| Problem Id || 4 || An unsigned integer which is the global unique id of the problem that the source file tries to solve. ||
|| Testcase Number || 1 || The number of testcase which should be provided as the input of the source file. 0 means to run all possible testcases. ||
|| Version || 4 || An unsigned integer representing the current version of the problem. If this version is not found by the judge client, a synchronization is required. ||
|| Time Limit || 2 || The maximum limit of the running time of the program, in seconds. It should be no more than 300(5 minutes). ||
|| Memory Limit || 4 || The maximum size of the memory that can be used by the program, in kilobytes. It should be no more than 1048576(1G). ||
|| Output Limit || 2 || The maximum size of output that can be generated by the program, in kilobytes. It should be no more than 16384(16M). ||

If the client runs on the same machine with the queue service, then no source file is required. Otherwise, the service should send the source file to the client after the description. The file should be compressed using Lempel-Ziv coding (LZ77) before transmission, that is, the gzip file format. The service first sends a 2-byte unsigned integer indicating the size of the compressed file in bytes, then its binary content. Neither the original nor the compressed source file size can be more than 65536(64K).

After the client receives the judge request, it will reply with an unsigned integer defined as follows:
|| *Code* || *Name* || *Description* ||
|| 100 || Ready || Everything is ok. The client is ready to judge the program. ||
|| 101 || !UnsupportedSourceFileType || The client does not know how to compile the source file. It can happen when the service sends out an invalid one or to a wrong client. ||
|| 102 || !NoSuchProblem || The problem or its specified version is not found by the client. Need data synchronization. ||
|| 103 || !InvalidTestcase || No corresponding testcase found by the client. ||
|| 104 || !InvalidTimeLimit || Time limit is 0 or too large. ||
|| 105 || !InvalidMemoryLimit || Memory limit is 0 or too large. ||
|| 106 || !InvalidOutputLimit || Output limit is 0 or too large. ||
|| 107 || !InvalidDataSize || Source file size is 0 or too large. ||
|| 108 || !InvalidData || Source file can not be decompressed or its size is too large. ||
|| 14 || !InternalError || Something wrong in the client itself. Could be caused by system issues, for example, the disk is full. ||

== 2. Data Synchronization ==
If the client replies with a code of 100, the service should send the test data of the problem to the client. For other codes, this process is skipped.

The data should be a [http://en.wikipedia.org/wiki/PKZIP PKZIP] compatible zip file. Its content should have exactly the same structure as the directory for a specific version of a problem, which is defined [ProblemDirectoryStructure here]

The service first sends a 4-byte unsigned integer indicating the size of the zip file in bytes, then its binary content.

After the client receives the data file, it will reply with one of the following code:
|| *Code* || *Name* || *Description* ||
|| 100 || Ready || Everything is ok. The client is ready to judge the program. ||
|| 109 || !InvalidDataSize || Data file size is not a positive integer. ||
|| 110 || !InvalidData || Data file can not be decompressed or its content structure is invalid. ||

== 3. Judge ==
After everything is ready, the client begins to judge the program. It will report the status to the service continuously. There are 2 types of messages:
|| *Name* || *Size || *Description* ||
|| Running Time/Memory Usage || 8 || The program's CPU time in milliseconds (first 4 bytes) and its peak memory usage in kilobytes (last 4 bytes) ||
|| Status code || 1 || An unsigned integer representing the current status of the judging process. ||

All possible status codes are defined in the following table
|| *Code* || *Name* || *Description* ||
|| 1 || Compiling || The client is compiling the source file. ||
|| 2 || Running || The client is executing the program. ||
|| 3 || !RuntimeError || The program is terminated abnormally. ||
|| 4 || !WrongAnswer || The program's output is not the same as the standard output. ||
|| 5 || Accepted || The program's output is exactly the same as the standard output. ||
|| 6 || !TimeLimitExceeded || The program's running time exceeds the limit. ||
|| 7 || !MemoryLimitExceeded || The program's memory usage exceeds the limit. ||
|| 10 || !OutputLimitExceeded || The program's output size exceeds the limit. ||
|| 12 || !CompilationError || The compilation of the source file fails. ||
|| 13 || !PresentationError || The program's output is generally the same as the standard output, except for some white spaces or blank lines. ||
|| 14 || !InternalError || Something wrong in the client itself. Could be caused by system issues, for example, the disk is full. ||
|| 15 || !FloatingPointError || Like division by zero ||
|| 16 || !SegmentationFault || The program is terminated due to a segmentation fault. ||
|| 19 || Judging || The client is comparing the output of the program and the standard output. ||

The client will first compile the source file and then run all test cases one by one. The test case with number 0 will be run at first, then number 1, and so on. The following image demonstrates all possible message sequences in the judge process.
http://zoj.googlecode.com/svn/wiki/images/JudgeMessageFlowChart.png

Here is a typical message sequence sent by the client(in text format for convinience):
{{{
1                                // Compiling
2                                // Running test case 0
1000 32                          // Run Time: 1 second   Memory Usage: 32K
2000 128                         // Run Time: 2 seconds  Memory Usage: 128K
19                               // Judging
5                                // Accepted
2                                // Running test case 1
1000 32                          // Run Time: 1 second   Memory Usage: 32K
7                                // MemoryLimitExceeded
2                                // Running test case 2
1000 32                          // Run Time: 1 second   Memory Usage: 32K
19                               // Judging
4                                // Wrong Answer
}}}